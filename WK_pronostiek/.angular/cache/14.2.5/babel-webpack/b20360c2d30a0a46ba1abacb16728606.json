{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../match.service\";\nimport * as i2 from \"@angular/common\";\n\nfunction MatchesComponent_li_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const match_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\"\", match_r1.team1, \" - \", match_r1.team2, \"\");\n  }\n}\n\nexport class MatchesComponent {\n  constructor(matchService) {\n    this.matchService = matchService;\n  } // // (Async pipe method) A dollar sign after a variable is an observable.\n  // matches$ : Observable<Match[]> = new Observable<Match[]>();\n\n\n  ngOnInit() {// // (Async pipe method) used if a subscription is not needed and data is not mutated.\n    // this.matches$ = this.matchService.getMatches();\n    // // Subscibe on observables. always done with API's.\n    // // Subscibe is done when you want to manipulate the data (filter, uppercase...)\n    // this.matchService.getMatches().subscribe(\n    //   apiMatches => {\n    //     console.log(\"apiMatches:\", apiMatches);\n    //     this.matches = apiMatches;\n    //   }\n    // )\n  }\n\n}\n\nMatchesComponent.ɵfac = function MatchesComponent_Factory(t) {\n  return new (t || MatchesComponent)(i0.ɵɵdirectiveInject(i1.MatchService));\n};\n\nMatchesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MatchesComponent,\n  selectors: [[\"app-matches\"]],\n  decls: 5,\n  vars: 3,\n  consts: [[4, \"ngFor\", \"ngForOf\"]],\n  template: function MatchesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"matches works!\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"ul\");\n      i0.ɵɵtemplate(3, MatchesComponent_li_3_Template, 2, 2, \"li\", 0);\n      i0.ɵɵpipe(4, \"async\");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(4, 1, ctx.matches$));\n    }\n  },\n  dependencies: [i2.NgForOf, i2.AsyncPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJtYXRjaGVzLmNvbXBvbmVudC5jc3MifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;IAMEA;IAA6CA;IAAiCA;;;;;IAAjCA;IAAAA;;;;ACK/C,OAAM,MAAOC,gBAAP,CAAuB;EAI3BC,YAAoBC,YAApB,EAA8C;IAA1B;EAA+B,CAJxB,CAM3B;EACA;;;EAEAC,QAAQ,IACN;IACA;IAGA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAID;;AAzB0B;;;mBAAhBH,kBAAgBD;AAAA;;;QAAhBC;EAAgBI;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDX7BT;MAAGA;MAAcA;MACjBA;MAKEA;;MACFA;;;;MADwBA;MAAAA","names":["i0","MatchesComponent","constructor","matchService","ngOnInit","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\timgr\\OneDrive\\Desktop\\stuff\\school\\angular_2023\\projects\\WK_pronostiek\\src\\app\\matches\\matches.component.html","C:\\Users\\timgr\\OneDrive\\Desktop\\stuff\\school\\angular_2023\\projects\\WK_pronostiek\\src\\app\\matches\\matches.component.ts"],"sourcesContent":["<p>matches works!</p>\n<ul>\n  <!-- subscribe method -->\n  <!-- <li *ngFor=\"let match of matches\">{{match.team1}} - {{match.team2}}</li> -->\n\n  <!-- Async pipe method -->\n  <li *ngFor=\"let match of (matches$ | async)\">{{match.team1}} - {{match.team2}}</li>\n</ul>\n","import { ThisReceiver } from '@angular/compiler';\nimport { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Match } from '../match';\nimport { MatchService } from '../match.service';\n\n@Component({\n  selector: 'app-matches',\n  templateUrl: './matches.component.html',\n  styleUrls: ['./matches.component.css']\n})\nexport class MatchesComponent implements OnInit {\n  // // needed for obsevables, but async does not use it.\n  matches! : Match[];\n\n  constructor(private matchService: MatchService) { }\n\n  // // (Async pipe method) A dollar sign after a variable is an observable.\n  // matches$ : Observable<Match[]> = new Observable<Match[]>();\n\n  ngOnInit(): void {\n    // // (Async pipe method) used if a subscription is not needed and data is not mutated.\n    // this.matches$ = this.matchService.getMatches();\n\n\n    // // Subscibe on observables. always done with API's.\n    // // Subscibe is done when you want to manipulate the data (filter, uppercase...)\n    // this.matchService.getMatches().subscribe(\n    //   apiMatches => {\n    //     console.log(\"apiMatches:\", apiMatches);\n    //     this.matches = apiMatches;\n    //   }\n    // )\n\n\n\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}